{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_studyTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_kernelAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_defaultDailyLimit",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "ContractAuthorized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "ContractDeauthorized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldKernel",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newKernel",
						"type": "address"
					}
				],
				"name": "KernelAddressUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "requestedAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "allocation",
						"type": "uint8"
					}
				],
				"name": "KernelAllocationResult",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "oldThreshold",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "newThreshold",
						"type": "uint8"
					}
				],
				"name": "MinimumThresholdUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isPaused",
						"type": "bool"
					}
				],
				"name": "PauseStatusChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "operation",
						"type": "string"
					}
				],
				"name": "TokenOperationApproved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "TokenOperationDenied",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "limit",
						"type": "uint256"
					}
				],
				"name": "UserLimitSet",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "authorizeContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "additionalData",
						"type": "bytes"
					}
				],
				"name": "authorizeMint",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "adjustedAmount",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "authorizeSimple",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "additionalData",
						"type": "bytes"
					}
				],
				"name": "authorizeTransfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "authorizedContracts",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "canUserOperate",
				"outputs": [
					{
						"internalType": "bool",
						"name": "canOperate",
						"type": "bool"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "deauthorizeContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "defaultDailyLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentDay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "additionalData",
						"type": "bytes"
					}
				],
				"name": "getKernelRecommendation",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getRemainingDailyLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getTodayUsage",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserDailyLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserStatus",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "dailyLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "usedToday",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "remainingToday",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "canOperate",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "allocation",
						"type": "uint8"
					}
				],
				"name": "isAllocationAcceptable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "kernel",
				"outputs": [
					{
						"internalType": "contract ITokenAllocationKernel",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "kernelAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumAllocationThreshold",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "additionalData",
						"type": "bytes"
					}
				],
				"name": "mintWithKernel",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "additionalData",
						"type": "bytes"
					}
				],
				"name": "previewKernelRecommendation",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "allocation",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "meetsThreshold",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "adjustedAmount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "withinDailyLimit",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "limit",
						"type": "uint256"
					}
				],
				"name": "setDefaultDailyLimit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_kernelAddress",
						"type": "address"
					}
				],
				"name": "setKernelAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "_threshold",
						"type": "uint8"
					}
				],
				"name": "setMinimumAllocationThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_isPaused",
						"type": "bool"
					}
				],
				"name": "setPause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_studyTokenAddress",
						"type": "address"
					}
				],
				"name": "setStudyToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "limit",
						"type": "uint256"
					}
				],
				"name": "setUserDailyLimit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "studyToken",
				"outputs": [
					{
						"internalType": "contract IStudyToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userDailyLimits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "userDailyUsage",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Refined Token Authority for StudyDAO with direct kernel integration Works with Kernel ID 1593 for token allocation recommendations",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"authorizeContract(address)": {
					"details": "Authorize a contract"
				},
				"authorizeMint(address,uint256,bytes)": {
					"details": "Authorize a token mint operation with kernel verification",
					"params": {
						"additionalData": "Additional data for kernel decision",
						"amount": "Amount of tokens to mint",
						"to": "Address to mint tokens to"
					},
					"returns": {
						"adjustedAmount": "The adjusted amount based on kernel recommendation",
						"success": "True if operation is authorized"
					}
				},
				"authorizeSimple(address,uint256)": {
					"details": "Simple authorization without kernel (for compatibility/emergency)",
					"params": {
						"amount": "Amount to authorize",
						"to": "Address to authorize for"
					},
					"returns": {
						"_0": "bool True if authorized"
					}
				},
				"authorizeTransfer(address,address,uint256,bytes)": {
					"details": "Authorize a token transfer operation with kernel verification",
					"params": {
						"additionalData": "Additional data for kernel decision",
						"amount": "Amount of tokens to transfer",
						"from": "Address sending tokens",
						"to": "Address receiving tokens"
					},
					"returns": {
						"_0": "bool True if transfer is authorized"
					}
				},
				"canUserOperate(address,uint256)": {
					"details": "Check if user can perform operation with given amount"
				},
				"constructor": {
					"details": "Constructor initializing StudyDAO token authority",
					"params": {
						"_defaultDailyLimit": "Default daily limit for users",
						"_kernelAddress": "Address of the Token Allocation Kernel (1593)",
						"_studyTokenAddress": "Address of the StudyToken contract",
						"initialOwner": "Owner of the contract"
					}
				},
				"deauthorizeContract(address)": {
					"details": "Deauthorize a contract"
				},
				"getCurrentDay()": {
					"details": "Get the current day number"
				},
				"getKernelRecommendation(address,uint256,bytes)": {
					"details": "Get recommendation from kernel with error handling",
					"params": {
						"additionalData": "Any additional data for the kernel",
						"amount": "Requested token amount",
						"user": "Address requesting tokens"
					},
					"returns": {
						"_0": "allocation Recommended allocation (0-255), 0 if error"
					}
				},
				"getRemainingDailyLimit(address)": {
					"details": "Get a user's remaining daily limit"
				},
				"getTodayUsage(address)": {
					"details": "Get a user's used amount for today"
				},
				"getUserDailyLimit(address)": {
					"details": "Get a user's effective daily limit"
				},
				"getUserStatus(address)": {
					"details": "Get user's complete status"
				},
				"isAllocationAcceptable(uint8)": {
					"details": "Check if allocation meets minimum threshold",
					"params": {
						"allocation": "The allocation score from kernel (0-255)"
					},
					"returns": {
						"_0": "bool True if allocation is acceptable"
					}
				},
				"mintWithKernel(address,uint256,bytes)": {
					"details": "Direct mint function with kernel verification (owner only)",
					"params": {
						"additionalData": "Additional data for kernel decision",
						"amount": "Amount of tokens to mint",
						"to": "Address to mint tokens to"
					},
					"returns": {
						"_0": "bool True if mint was successful"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"previewKernelRecommendation(address,uint256,bytes)": {
					"details": "Preview what would happen with a kernel call (without executing)"
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setDefaultDailyLimit(uint256)": {
					"details": "Set default daily limit for all users"
				},
				"setKernelAddress(address)": {
					"details": "Update kernel address"
				},
				"setMinimumAllocationThreshold(uint8)": {
					"details": "Set the minimum allocation threshold"
				},
				"setPause(bool)": {
					"details": "Emergency pause/unpause"
				},
				"setStudyToken(address)": {
					"details": "Set StudyToken contract address"
				},
				"setUserDailyLimit(address,uint256)": {
					"details": "Set daily token limit for a specific user"
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "StudyTokenAuthority",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/StudyTokenAuthority.sol": "StudyTokenAuthority"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contracts/StudyTokenAuthority.sol": {
			"keccak256": "0x5c7e3382dbd4d9a6b515997913fc34634ac5c8692ee8b6b415f373b698e0449d",
			"license": "MIT",
			"urls": [
				"bzz-raw://a21d04505d36c2627601ba8f93bde58082cf478c36a3b2d3925949485fad8491",
				"dweb:/ipfs/QmdhMStKDMA9h8niTCkqmWkzqpXMNs8TUXpuLTE9z3cKKA"
			]
		}
	},
	"version": 1
}